// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: yandex/cloud/ydb/v1/database_service.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace grpsApp1 {

  /// <summary>Holder for reflection information generated from yandex/cloud/ydb/v1/database_service.proto</summary>
  public static partial class DatabaseServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for yandex/cloud/ydb/v1/database_service.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DatabaseServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cip5YW5kZXgvY2xvdWQveWRiL3YxL2RhdGFiYXNlX3NlcnZpY2UucHJvdG8S",
            "E3lhbmRleC5jbG91ZC55ZGIudjEaHGdvb2dsZS9hcGkvYW5ub3RhdGlvbnMu",
            "cHJvdG8aIGdvb2dsZS9wcm90b2J1Zi9maWVsZF9tYXNrLnByb3RvGiB5YW5k",
            "ZXgvY2xvdWQvYXBpL29wZXJhdGlvbi5wcm90bxomeWFuZGV4L2Nsb3VkL29w",
            "ZXJhdGlvbi9vcGVyYXRpb24ucHJvdG8aHXlhbmRleC9jbG91ZC92YWxpZGF0",
            "aW9uLnByb3RvGiJ5YW5kZXgvY2xvdWQveWRiL3YxL2RhdGFiYXNlLnByb3Rv",
            "GiB5YW5kZXgvY2xvdWQveWRiL3YxL2JhY2t1cC5wcm90byKJAQoUUmVzdG9y",
            "ZUJhY2t1cFJlcXVlc3QSHwoJYmFja3VwX2lkGAEgASgJQgzoxzEBisgxBDw9",
            "NTASIQoLZGF0YWJhc2VfaWQYAiABKAlCDOjHMQGKyDEEPD01MBIYChBwYXRo",
            "c190b19yZXN0b3JlGAMgAygJEhMKC3RhcmdldF9wYXRoGAQgASgJIj8KFVJl",
            "c3RvcmVCYWNrdXBNZXRhZGF0YRIRCgliYWNrdXBfaWQYASABKAkSEwoLZGF0",
            "YWJhc2VfaWQYAiABKAkiagoVQmFja3VwRGF0YWJhc2VSZXF1ZXN0EhMKC2Rh",
            "dGFiYXNlX2lkGAEgASgJEjwKD2JhY2t1cF9zZXR0aW5ncxgCIAEoCzIjLnlh",
            "bmRleC5jbG91ZC55ZGIudjEuQmFja3VwU2V0dGluZ3MiQAoWQmFja3VwRGF0",
            "YWJhc2VNZXRhZGF0YRIRCgliYWNrdXBfaWQYASABKAkSEwoLZGF0YWJhc2Vf",
            "aWQYAiABKAkiOQoUU3RhcnREYXRhYmFzZVJlcXVlc3QSIQoLZGF0YWJhc2Vf",
            "aWQYASABKAlCDOjHMQGKyDEEPD01MCJDChVTdGFydERhdGFiYXNlTWV0YWRh",
            "dGESEwoLZGF0YWJhc2VfaWQYASABKAkSFQoNZGF0YWJhc2VfbmFtZRgCIAEo",
            "CSI4ChNTdG9wRGF0YWJhc2VSZXF1ZXN0EiEKC2RhdGFiYXNlX2lkGAEgASgJ",
            "QgzoxzEBisgxBDw9NTAiQgoUU3RvcERhdGFiYXNlTWV0YWRhdGESEwoLZGF0",
            "YWJhc2VfaWQYASABKAkSFQoNZGF0YWJhc2VfbmFtZRgCIAEoCSI3ChJHZXRE",
            "YXRhYmFzZVJlcXVlc3QSIQoLZGF0YWJhc2VfaWQYASABKAlCDOjHMQGKyDEE",
            "PD01MCJnChRMaXN0RGF0YWJhc2VzUmVxdWVzdBIRCglmb2xkZXJfaWQYASAB",
            "KAkSHQoJcGFnZV9zaXplGAIgASgDQgr6xzEGMC0xMDAwEh0KCnBhZ2VfdG9r",
            "ZW4YAyABKAlCCYrIMQU8PTEwMCJiChVMaXN0RGF0YWJhc2VzUmVzcG9uc2US",
            "MAoJZGF0YWJhc2VzGAEgAygLMh0ueWFuZGV4LmNsb3VkLnlkYi52MS5EYXRh",
            "YmFzZRIXCg9uZXh0X3BhZ2VfdG9rZW4YAiABKAkihwYKFUNyZWF0ZURhdGFi",
            "YXNlUmVxdWVzdBIRCglmb2xkZXJfaWQYASABKAkSDAoEbmFtZRgCIAEoCRIT",
            "CgtkZXNjcmlwdGlvbhgDIAEoCRIaChJyZXNvdXJjZV9wcmVzZXRfaWQYBCAB",
            "KAkSOgoOc3RvcmFnZV9jb25maWcYBSABKAsyIi55YW5kZXguY2xvdWQueWRi",
            "LnYxLlN0b3JhZ2VDb25maWcSNgoMc2NhbGVfcG9saWN5GAYgASgLMiAueWFu",
            "ZGV4LmNsb3VkLnlkYi52MS5TY2FsZVBvbGljeRISCgpuZXR3b3JrX2lkGAcg",
            "ASgJEhIKCnN1Ym5ldF9pZHMYCCADKAkSPAoOem9uYWxfZGF0YWJhc2UYCSAB",
            "KAsyIi55YW5kZXguY2xvdWQueWRiLnYxLlpvbmFsRGF0YWJhc2VIABJCChFy",
            "ZWdpb25hbF9kYXRhYmFzZRgKIAEoCzIlLnlhbmRleC5jbG91ZC55ZGIudjEu",
            "UmVnaW9uYWxEYXRhYmFzZUgAEkQKEmRlZGljYXRlZF9kYXRhYmFzZRgNIAEo",
            "CzImLnlhbmRleC5jbG91ZC55ZGIudjEuRGVkaWNhdGVkRGF0YWJhc2VIABJG",
            "ChNzZXJ2ZXJsZXNzX2RhdGFiYXNlGA4gASgLMicueWFuZGV4LmNsb3VkLnlk",
            "Yi52MS5TZXJ2ZXJsZXNzRGF0YWJhc2VIABIZChFhc3NpZ25fcHVibGljX2lw",
            "cxgLIAEoCBITCgtsb2NhdGlvbl9pZBgMIAEoCRJGCgZsYWJlbHMYDyADKAsy",
            "Ni55YW5kZXguY2xvdWQueWRiLnYxLkNyZWF0ZURhdGFiYXNlUmVxdWVzdC5M",
            "YWJlbHNFbnRyeRI4Cg1iYWNrdXBfY29uZmlnGBAgASgLMiEueWFuZGV4LmNs",
            "b3VkLnlkYi52MS5CYWNrdXBDb25maWcaLQoLTGFiZWxzRW50cnkSCwoDa2V5",
            "GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4AUIPCg1kYXRhYmFzZV90eXBlIkQK",
            "FkNyZWF0ZURhdGFiYXNlTWV0YWRhdGESEwoLZGF0YWJhc2VfaWQYASABKAkS",
            "FQoNZGF0YWJhc2VfbmFtZRgCIAEoCSLNBgoVVXBkYXRlRGF0YWJhc2VSZXF1",
            "ZXN0EhEKCWZvbGRlcl9pZBgBIAEoCRIvCgt1cGRhdGVfbWFzaxgCIAEoCzIa",
            "Lmdvb2dsZS5wcm90b2J1Zi5GaWVsZE1hc2sSEwoLZGF0YWJhc2VfaWQYAyAB",
            "KAkSDAoEbmFtZRgEIAEoCRITCgtkZXNjcmlwdGlvbhgFIAEoCRIaChJyZXNv",
            "dXJjZV9wcmVzZXRfaWQYBiABKAkSOgoOc3RvcmFnZV9jb25maWcYByABKAsy",
            "Ii55YW5kZXguY2xvdWQueWRiLnYxLlN0b3JhZ2VDb25maWcSNgoMc2NhbGVf",
            "cG9saWN5GAggASgLMiAueWFuZGV4LmNsb3VkLnlkYi52MS5TY2FsZVBvbGlj",
            "eRISCgpuZXR3b3JrX2lkGAkgASgJEhIKCnN1Ym5ldF9pZHMYCiADKAkSPAoO",
            "em9uYWxfZGF0YWJhc2UYCyABKAsyIi55YW5kZXguY2xvdWQueWRiLnYxLlpv",
            "bmFsRGF0YWJhc2VIABJCChFyZWdpb25hbF9kYXRhYmFzZRgMIAEoCzIlLnlh",
            "bmRleC5jbG91ZC55ZGIudjEuUmVnaW9uYWxEYXRhYmFzZUgAEkQKEmRlZGlj",
            "YXRlZF9kYXRhYmFzZRgPIAEoCzImLnlhbmRleC5jbG91ZC55ZGIudjEuRGVk",
            "aWNhdGVkRGF0YWJhc2VIABJGChNzZXJ2ZXJsZXNzX2RhdGFiYXNlGBAgASgL",
            "MicueWFuZGV4LmNsb3VkLnlkYi52MS5TZXJ2ZXJsZXNzRGF0YWJhc2VIABIZ",
            "ChFhc3NpZ25fcHVibGljX2lwcxgNIAEoCBITCgtsb2NhdGlvbl9pZBgOIAEo",
            "CRJGCgZsYWJlbHMYESADKAsyNi55YW5kZXguY2xvdWQueWRiLnYxLlVwZGF0",
            "ZURhdGFiYXNlUmVxdWVzdC5MYWJlbHNFbnRyeRI4Cg1iYWNrdXBfY29uZmln",
            "GBIgASgLMiEueWFuZGV4LmNsb3VkLnlkYi52MS5CYWNrdXBDb25maWcaLQoL",
            "TGFiZWxzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4AUIP",
            "Cg1kYXRhYmFzZV90eXBlIkQKFlVwZGF0ZURhdGFiYXNlTWV0YWRhdGESEwoL",
            "ZGF0YWJhc2VfaWQYASABKAkSFQoNZGF0YWJhc2VfbmFtZRgCIAEoCSIsChVE",
            "ZWxldGVEYXRhYmFzZVJlcXVlc3QSEwoLZGF0YWJhc2VfaWQYASABKAkiRAoW",
            "RGVsZXRlRGF0YWJhc2VNZXRhZGF0YRITCgtkYXRhYmFzZV9pZBgBIAEoCRIV",
            "Cg1kYXRhYmFzZV9uYW1lGAIgASgJMqELCg9EYXRhYmFzZVNlcnZpY2USdgoD",
            "R2V0EicueWFuZGV4LmNsb3VkLnlkYi52MS5HZXREYXRhYmFzZVJlcXVlc3Qa",
            "HS55YW5kZXguY2xvdWQueWRiLnYxLkRhdGFiYXNlIieC0+STAiESHy95ZGIv",
            "djEvZGF0YWJhc2VzL3tkYXRhYmFzZV9pZH0SeAoETGlzdBIpLnlhbmRleC5j",
            "bG91ZC55ZGIudjEuTGlzdERhdGFiYXNlc1JlcXVlc3QaKi55YW5kZXguY2xv",
            "dWQueWRiLnYxLkxpc3REYXRhYmFzZXNSZXNwb25zZSIZgtPkkwITEhEveWRi",
            "L3YxL2RhdGFiYXNlcxKbAQoGQ3JlYXRlEioueWFuZGV4LmNsb3VkLnlkYi52",
            "MS5DcmVhdGVEYXRhYmFzZVJlcXVlc3QaIS55YW5kZXguY2xvdWQub3BlcmF0",
            "aW9uLk9wZXJhdGlvbiJCgtPkkwIWIhEveWRiL3YxL2RhdGFiYXNlczoBKrLS",
            "KiIKFkNyZWF0ZURhdGFiYXNlTWV0YWRhdGESCERhdGFiYXNlEqkBCgZVcGRh",
            "dGUSKi55YW5kZXguY2xvdWQueWRiLnYxLlVwZGF0ZURhdGFiYXNlUmVxdWVz",
            "dBohLnlhbmRleC5jbG91ZC5vcGVyYXRpb24uT3BlcmF0aW9uIlCC0+STAiQy",
            "Hy95ZGIvdjEvZGF0YWJhc2VzL3tkYXRhYmFzZV9pZH06ASqy0ioiChZVcGRh",
            "dGVEYXRhYmFzZU1ldGFkYXRhEghEYXRhYmFzZRKpAQoFU3RhcnQSKS55YW5k",
            "ZXguY2xvdWQueWRiLnYxLlN0YXJ0RGF0YWJhc2VSZXF1ZXN0GiEueWFuZGV4",
            "LmNsb3VkLm9wZXJhdGlvbi5PcGVyYXRpb24iUoLT5JMCJyIlL3lkYi92MS9k",
            "YXRhYmFzZXMve2RhdGFiYXNlX2lkfTpzdGFydLLSKiEKFVN0YXJ0RGF0YWJh",
            "c2VNZXRhZGF0YRIIRGF0YWJhc2USpQEKBFN0b3ASKC55YW5kZXguY2xvdWQu",
            "eWRiLnYxLlN0b3BEYXRhYmFzZVJlcXVlc3QaIS55YW5kZXguY2xvdWQub3Bl",
            "cmF0aW9uLk9wZXJhdGlvbiJQgtPkkwImIiQveWRiL3YxL2RhdGFiYXNlcy97",
            "ZGF0YWJhc2VfaWR9OnN0b3Cy0iogChRTdG9wRGF0YWJhc2VNZXRhZGF0YRII",
            "RGF0YWJhc2USswEKBkRlbGV0ZRIqLnlhbmRleC5jbG91ZC55ZGIudjEuRGVs",
            "ZXRlRGF0YWJhc2VSZXF1ZXN0GiEueWFuZGV4LmNsb3VkLm9wZXJhdGlvbi5P",
            "cGVyYXRpb24iWoLT5JMCISofL3lkYi92MS9kYXRhYmFzZXMve2RhdGFiYXNl",
            "X2lkfbLSKi8KFkRlbGV0ZURhdGFiYXNlTWV0YWRhdGESFWdvb2dsZS5wcm90",
            "b2J1Zi5FbXB0eRKiAQoHUmVzdG9yZRIpLnlhbmRleC5jbG91ZC55ZGIudjEu",
            "UmVzdG9yZUJhY2t1cFJlcXVlc3QaIS55YW5kZXguY2xvdWQub3BlcmF0aW9u",
            "Lk9wZXJhdGlvbiJJgtPkkwIeIhkveWRiL3YxL2RhdGFiYXNlczpyZXN0b3Jl",
            "OgEqstIqIQoVUmVzdG9yZUJhY2t1cE1ldGFkYXRhEghEYXRhYmFzZRKiAQoG",
            "QmFja3VwEioueWFuZGV4LmNsb3VkLnlkYi52MS5CYWNrdXBEYXRhYmFzZVJl",
            "cXVlc3QaIS55YW5kZXguY2xvdWQub3BlcmF0aW9uLk9wZXJhdGlvbiJJgtPk",
            "kwIdIhgveWRiL3YxL2RhdGFiYXNlczpiYWNrdXA6ASqy0ioiChZCYWNrdXBE",
            "YXRhYmFzZU1ldGFkYXRhEghEYXRhYmFzZUJhChd5YW5kZXguY2xvdWQuYXBp",
            "LnlkYi52MVo7Z2l0aHViLmNvbS95YW5kZXgtY2xvdWQvZ28tZ2VucHJvdG8v",
            "eWFuZGV4L2Nsb3VkL3lkYi92MTt5ZGKqAghncnBzQXBwMWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::grpsApp1.AnnotationsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.FieldMaskReflection.Descriptor, global::grpsApp1.OperationReflection.Descriptor, global::grpsApp1.OperationReflection.Descriptor, global::Yandex.Cloud.ValidationReflection.Descriptor, global::grpsApp1.DatabaseReflection.Descriptor, global::grpsApp1.BackupReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::grpsApp1.RestoreBackupRequest), global::grpsApp1.RestoreBackupRequest.Parser, new[]{ "BackupId", "DatabaseId", "PathsToRestore", "TargetPath" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::grpsApp1.RestoreBackupMetadata), global::grpsApp1.RestoreBackupMetadata.Parser, new[]{ "BackupId", "DatabaseId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::grpsApp1.BackupDatabaseRequest), global::grpsApp1.BackupDatabaseRequest.Parser, new[]{ "DatabaseId", "BackupSettings" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::grpsApp1.BackupDatabaseMetadata), global::grpsApp1.BackupDatabaseMetadata.Parser, new[]{ "BackupId", "DatabaseId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::grpsApp1.StartDatabaseRequest), global::grpsApp1.StartDatabaseRequest.Parser, new[]{ "DatabaseId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::grpsApp1.StartDatabaseMetadata), global::grpsApp1.StartDatabaseMetadata.Parser, new[]{ "DatabaseId", "DatabaseName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::grpsApp1.StopDatabaseRequest), global::grpsApp1.StopDatabaseRequest.Parser, new[]{ "DatabaseId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::grpsApp1.StopDatabaseMetadata), global::grpsApp1.StopDatabaseMetadata.Parser, new[]{ "DatabaseId", "DatabaseName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::grpsApp1.GetDatabaseRequest), global::grpsApp1.GetDatabaseRequest.Parser, new[]{ "DatabaseId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::grpsApp1.ListDatabasesRequest), global::grpsApp1.ListDatabasesRequest.Parser, new[]{ "FolderId", "PageSize", "PageToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::grpsApp1.ListDatabasesResponse), global::grpsApp1.ListDatabasesResponse.Parser, new[]{ "Databases", "NextPageToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::grpsApp1.CreateDatabaseRequest), global::grpsApp1.CreateDatabaseRequest.Parser, new[]{ "FolderId", "Name", "Description", "ResourcePresetId", "StorageConfig", "ScalePolicy", "NetworkId", "SubnetIds", "ZonalDatabase", "RegionalDatabase", "DedicatedDatabase", "ServerlessDatabase", "AssignPublicIps", "LocationId", "Labels", "BackupConfig" }, new[]{ "DatabaseType" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::grpsApp1.CreateDatabaseMetadata), global::grpsApp1.CreateDatabaseMetadata.Parser, new[]{ "DatabaseId", "DatabaseName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::grpsApp1.UpdateDatabaseRequest), global::grpsApp1.UpdateDatabaseRequest.Parser, new[]{ "FolderId", "UpdateMask", "DatabaseId", "Name", "Description", "ResourcePresetId", "StorageConfig", "ScalePolicy", "NetworkId", "SubnetIds", "ZonalDatabase", "RegionalDatabase", "DedicatedDatabase", "ServerlessDatabase", "AssignPublicIps", "LocationId", "Labels", "BackupConfig" }, new[]{ "DatabaseType" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::grpsApp1.UpdateDatabaseMetadata), global::grpsApp1.UpdateDatabaseMetadata.Parser, new[]{ "DatabaseId", "DatabaseName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::grpsApp1.DeleteDatabaseRequest), global::grpsApp1.DeleteDatabaseRequest.Parser, new[]{ "DatabaseId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::grpsApp1.DeleteDatabaseMetadata), global::grpsApp1.DeleteDatabaseMetadata.Parser, new[]{ "DatabaseId", "DatabaseName" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class RestoreBackupRequest : pb::IMessage<RestoreBackupRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RestoreBackupRequest> _parser = new pb::MessageParser<RestoreBackupRequest>(() => new RestoreBackupRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RestoreBackupRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::grpsApp1.DatabaseServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestoreBackupRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestoreBackupRequest(RestoreBackupRequest other) : this() {
      backupId_ = other.backupId_;
      databaseId_ = other.databaseId_;
      pathsToRestore_ = other.pathsToRestore_.Clone();
      targetPath_ = other.targetPath_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestoreBackupRequest Clone() {
      return new RestoreBackupRequest(this);
    }

    /// <summary>Field number for the "backup_id" field.</summary>
    public const int BackupIdFieldNumber = 1;
    private string backupId_ = "";
    /// <summary>
    /// Required. ID of the YDB backup.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BackupId {
      get { return backupId_; }
      set {
        backupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "database_id" field.</summary>
    public const int DatabaseIdFieldNumber = 2;
    private string databaseId_ = "";
    /// <summary>
    /// Required. ID of the YDB database.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DatabaseId {
      get { return databaseId_; }
      set {
        databaseId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "paths_to_restore" field.</summary>
    public const int PathsToRestoreFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_pathsToRestore_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> pathsToRestore_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Specify paths to restore.
    /// If empty, all paths will restored by default.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> PathsToRestore {
      get { return pathsToRestore_; }
    }

    /// <summary>Field number for the "target_path" field.</summary>
    public const int TargetPathFieldNumber = 4;
    private string targetPath_ = "";
    /// <summary>
    /// Specify target path.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TargetPath {
      get { return targetPath_; }
      set {
        targetPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RestoreBackupRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RestoreBackupRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BackupId != other.BackupId) return false;
      if (DatabaseId != other.DatabaseId) return false;
      if(!pathsToRestore_.Equals(other.pathsToRestore_)) return false;
      if (TargetPath != other.TargetPath) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BackupId.Length != 0) hash ^= BackupId.GetHashCode();
      if (DatabaseId.Length != 0) hash ^= DatabaseId.GetHashCode();
      hash ^= pathsToRestore_.GetHashCode();
      if (TargetPath.Length != 0) hash ^= TargetPath.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (BackupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BackupId);
      }
      if (DatabaseId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DatabaseId);
      }
      pathsToRestore_.WriteTo(output, _repeated_pathsToRestore_codec);
      if (TargetPath.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TargetPath);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (BackupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BackupId);
      }
      if (DatabaseId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DatabaseId);
      }
      pathsToRestore_.WriteTo(ref output, _repeated_pathsToRestore_codec);
      if (TargetPath.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TargetPath);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BackupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BackupId);
      }
      if (DatabaseId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DatabaseId);
      }
      size += pathsToRestore_.CalculateSize(_repeated_pathsToRestore_codec);
      if (TargetPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetPath);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RestoreBackupRequest other) {
      if (other == null) {
        return;
      }
      if (other.BackupId.Length != 0) {
        BackupId = other.BackupId;
      }
      if (other.DatabaseId.Length != 0) {
        DatabaseId = other.DatabaseId;
      }
      pathsToRestore_.Add(other.pathsToRestore_);
      if (other.TargetPath.Length != 0) {
        TargetPath = other.TargetPath;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            BackupId = input.ReadString();
            break;
          }
          case 18: {
            DatabaseId = input.ReadString();
            break;
          }
          case 26: {
            pathsToRestore_.AddEntriesFrom(input, _repeated_pathsToRestore_codec);
            break;
          }
          case 34: {
            TargetPath = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            BackupId = input.ReadString();
            break;
          }
          case 18: {
            DatabaseId = input.ReadString();
            break;
          }
          case 26: {
            pathsToRestore_.AddEntriesFrom(ref input, _repeated_pathsToRestore_codec);
            break;
          }
          case 34: {
            TargetPath = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RestoreBackupMetadata : pb::IMessage<RestoreBackupMetadata>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RestoreBackupMetadata> _parser = new pb::MessageParser<RestoreBackupMetadata>(() => new RestoreBackupMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RestoreBackupMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::grpsApp1.DatabaseServiceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestoreBackupMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestoreBackupMetadata(RestoreBackupMetadata other) : this() {
      backupId_ = other.backupId_;
      databaseId_ = other.databaseId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestoreBackupMetadata Clone() {
      return new RestoreBackupMetadata(this);
    }

    /// <summary>Field number for the "backup_id" field.</summary>
    public const int BackupIdFieldNumber = 1;
    private string backupId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BackupId {
      get { return backupId_; }
      set {
        backupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "database_id" field.</summary>
    public const int DatabaseIdFieldNumber = 2;
    private string databaseId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DatabaseId {
      get { return databaseId_; }
      set {
        databaseId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RestoreBackupMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RestoreBackupMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BackupId != other.BackupId) return false;
      if (DatabaseId != other.DatabaseId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BackupId.Length != 0) hash ^= BackupId.GetHashCode();
      if (DatabaseId.Length != 0) hash ^= DatabaseId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (BackupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BackupId);
      }
      if (DatabaseId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DatabaseId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (BackupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BackupId);
      }
      if (DatabaseId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DatabaseId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BackupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BackupId);
      }
      if (DatabaseId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DatabaseId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RestoreBackupMetadata other) {
      if (other == null) {
        return;
      }
      if (other.BackupId.Length != 0) {
        BackupId = other.BackupId;
      }
      if (other.DatabaseId.Length != 0) {
        DatabaseId = other.DatabaseId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            BackupId = input.ReadString();
            break;
          }
          case 18: {
            DatabaseId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            BackupId = input.ReadString();
            break;
          }
          case 18: {
            DatabaseId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class BackupDatabaseRequest : pb::IMessage<BackupDatabaseRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BackupDatabaseRequest> _parser = new pb::MessageParser<BackupDatabaseRequest>(() => new BackupDatabaseRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BackupDatabaseRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::grpsApp1.DatabaseServiceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BackupDatabaseRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BackupDatabaseRequest(BackupDatabaseRequest other) : this() {
      databaseId_ = other.databaseId_;
      backupSettings_ = other.backupSettings_ != null ? other.backupSettings_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BackupDatabaseRequest Clone() {
      return new BackupDatabaseRequest(this);
    }

    /// <summary>Field number for the "database_id" field.</summary>
    public const int DatabaseIdFieldNumber = 1;
    private string databaseId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DatabaseId {
      get { return databaseId_; }
      set {
        databaseId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "backup_settings" field.</summary>
    public const int BackupSettingsFieldNumber = 2;
    private global::grpsApp1.BackupSettings backupSettings_;
    /// <summary>
    /// custom backup options, if required.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::grpsApp1.BackupSettings BackupSettings {
      get { return backupSettings_; }
      set {
        backupSettings_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BackupDatabaseRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BackupDatabaseRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DatabaseId != other.DatabaseId) return false;
      if (!object.Equals(BackupSettings, other.BackupSettings)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DatabaseId.Length != 0) hash ^= DatabaseId.GetHashCode();
      if (backupSettings_ != null) hash ^= BackupSettings.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (DatabaseId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DatabaseId);
      }
      if (backupSettings_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BackupSettings);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (DatabaseId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DatabaseId);
      }
      if (backupSettings_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BackupSettings);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DatabaseId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DatabaseId);
      }
      if (backupSettings_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BackupSettings);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BackupDatabaseRequest other) {
      if (other == null) {
        return;
      }
      if (other.DatabaseId.Length != 0) {
        DatabaseId = other.DatabaseId;
      }
      if (other.backupSettings_ != null) {
        if (backupSettings_ == null) {
          BackupSettings = new global::grpsApp1.BackupSettings();
        }
        BackupSettings.MergeFrom(other.BackupSettings);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DatabaseId = input.ReadString();
            break;
          }
          case 18: {
            if (backupSettings_ == null) {
              BackupSettings = new global::grpsApp1.BackupSettings();
            }
            input.ReadMessage(BackupSettings);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            DatabaseId = input.ReadString();
            break;
          }
          case 18: {
            if (backupSettings_ == null) {
              BackupSettings = new global::grpsApp1.BackupSettings();
            }
            input.ReadMessage(BackupSettings);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class BackupDatabaseMetadata : pb::IMessage<BackupDatabaseMetadata>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BackupDatabaseMetadata> _parser = new pb::MessageParser<BackupDatabaseMetadata>(() => new BackupDatabaseMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BackupDatabaseMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::grpsApp1.DatabaseServiceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BackupDatabaseMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BackupDatabaseMetadata(BackupDatabaseMetadata other) : this() {
      backupId_ = other.backupId_;
      databaseId_ = other.databaseId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BackupDatabaseMetadata Clone() {
      return new BackupDatabaseMetadata(this);
    }

    /// <summary>Field number for the "backup_id" field.</summary>
    public const int BackupIdFieldNumber = 1;
    private string backupId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BackupId {
      get { return backupId_; }
      set {
        backupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "database_id" field.</summary>
    public const int DatabaseIdFieldNumber = 2;
    private string databaseId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DatabaseId {
      get { return databaseId_; }
      set {
        databaseId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BackupDatabaseMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BackupDatabaseMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BackupId != other.BackupId) return false;
      if (DatabaseId != other.DatabaseId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BackupId.Length != 0) hash ^= BackupId.GetHashCode();
      if (DatabaseId.Length != 0) hash ^= DatabaseId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (BackupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BackupId);
      }
      if (DatabaseId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DatabaseId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (BackupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BackupId);
      }
      if (DatabaseId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DatabaseId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BackupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BackupId);
      }
      if (DatabaseId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DatabaseId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BackupDatabaseMetadata other) {
      if (other == null) {
        return;
      }
      if (other.BackupId.Length != 0) {
        BackupId = other.BackupId;
      }
      if (other.DatabaseId.Length != 0) {
        DatabaseId = other.DatabaseId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            BackupId = input.ReadString();
            break;
          }
          case 18: {
            DatabaseId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            BackupId = input.ReadString();
            break;
          }
          case 18: {
            DatabaseId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class StartDatabaseRequest : pb::IMessage<StartDatabaseRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StartDatabaseRequest> _parser = new pb::MessageParser<StartDatabaseRequest>(() => new StartDatabaseRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartDatabaseRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::grpsApp1.DatabaseServiceReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartDatabaseRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartDatabaseRequest(StartDatabaseRequest other) : this() {
      databaseId_ = other.databaseId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartDatabaseRequest Clone() {
      return new StartDatabaseRequest(this);
    }

    /// <summary>Field number for the "database_id" field.</summary>
    public const int DatabaseIdFieldNumber = 1;
    private string databaseId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DatabaseId {
      get { return databaseId_; }
      set {
        databaseId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartDatabaseRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartDatabaseRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DatabaseId != other.DatabaseId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DatabaseId.Length != 0) hash ^= DatabaseId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (DatabaseId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DatabaseId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (DatabaseId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DatabaseId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DatabaseId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DatabaseId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartDatabaseRequest other) {
      if (other == null) {
        return;
      }
      if (other.DatabaseId.Length != 0) {
        DatabaseId = other.DatabaseId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DatabaseId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            DatabaseId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class StartDatabaseMetadata : pb::IMessage<StartDatabaseMetadata>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StartDatabaseMetadata> _parser = new pb::MessageParser<StartDatabaseMetadata>(() => new StartDatabaseMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartDatabaseMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::grpsApp1.DatabaseServiceReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartDatabaseMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartDatabaseMetadata(StartDatabaseMetadata other) : this() {
      databaseId_ = other.databaseId_;
      databaseName_ = other.databaseName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartDatabaseMetadata Clone() {
      return new StartDatabaseMetadata(this);
    }

    /// <summary>Field number for the "database_id" field.</summary>
    public const int DatabaseIdFieldNumber = 1;
    private string databaseId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DatabaseId {
      get { return databaseId_; }
      set {
        databaseId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "database_name" field.</summary>
    public const int DatabaseNameFieldNumber = 2;
    private string databaseName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DatabaseName {
      get { return databaseName_; }
      set {
        databaseName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartDatabaseMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartDatabaseMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DatabaseId != other.DatabaseId) return false;
      if (DatabaseName != other.DatabaseName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DatabaseId.Length != 0) hash ^= DatabaseId.GetHashCode();
      if (DatabaseName.Length != 0) hash ^= DatabaseName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (DatabaseId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DatabaseId);
      }
      if (DatabaseName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DatabaseName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (DatabaseId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DatabaseId);
      }
      if (DatabaseName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DatabaseName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DatabaseId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DatabaseId);
      }
      if (DatabaseName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DatabaseName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartDatabaseMetadata other) {
      if (other == null) {
        return;
      }
      if (other.DatabaseId.Length != 0) {
        DatabaseId = other.DatabaseId;
      }
      if (other.DatabaseName.Length != 0) {
        DatabaseName = other.DatabaseName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DatabaseId = input.ReadString();
            break;
          }
          case 18: {
            DatabaseName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            DatabaseId = input.ReadString();
            break;
          }
          case 18: {
            DatabaseName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class StopDatabaseRequest : pb::IMessage<StopDatabaseRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StopDatabaseRequest> _parser = new pb::MessageParser<StopDatabaseRequest>(() => new StopDatabaseRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StopDatabaseRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::grpsApp1.DatabaseServiceReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopDatabaseRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopDatabaseRequest(StopDatabaseRequest other) : this() {
      databaseId_ = other.databaseId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopDatabaseRequest Clone() {
      return new StopDatabaseRequest(this);
    }

    /// <summary>Field number for the "database_id" field.</summary>
    public const int DatabaseIdFieldNumber = 1;
    private string databaseId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DatabaseId {
      get { return databaseId_; }
      set {
        databaseId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StopDatabaseRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StopDatabaseRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DatabaseId != other.DatabaseId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DatabaseId.Length != 0) hash ^= DatabaseId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (DatabaseId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DatabaseId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (DatabaseId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DatabaseId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DatabaseId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DatabaseId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StopDatabaseRequest other) {
      if (other == null) {
        return;
      }
      if (other.DatabaseId.Length != 0) {
        DatabaseId = other.DatabaseId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DatabaseId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            DatabaseId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class StopDatabaseMetadata : pb::IMessage<StopDatabaseMetadata>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StopDatabaseMetadata> _parser = new pb::MessageParser<StopDatabaseMetadata>(() => new StopDatabaseMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StopDatabaseMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::grpsApp1.DatabaseServiceReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopDatabaseMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopDatabaseMetadata(StopDatabaseMetadata other) : this() {
      databaseId_ = other.databaseId_;
      databaseName_ = other.databaseName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopDatabaseMetadata Clone() {
      return new StopDatabaseMetadata(this);
    }

    /// <summary>Field number for the "database_id" field.</summary>
    public const int DatabaseIdFieldNumber = 1;
    private string databaseId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DatabaseId {
      get { return databaseId_; }
      set {
        databaseId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "database_name" field.</summary>
    public const int DatabaseNameFieldNumber = 2;
    private string databaseName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DatabaseName {
      get { return databaseName_; }
      set {
        databaseName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StopDatabaseMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StopDatabaseMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DatabaseId != other.DatabaseId) return false;
      if (DatabaseName != other.DatabaseName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DatabaseId.Length != 0) hash ^= DatabaseId.GetHashCode();
      if (DatabaseName.Length != 0) hash ^= DatabaseName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (DatabaseId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DatabaseId);
      }
      if (DatabaseName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DatabaseName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (DatabaseId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DatabaseId);
      }
      if (DatabaseName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DatabaseName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DatabaseId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DatabaseId);
      }
      if (DatabaseName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DatabaseName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StopDatabaseMetadata other) {
      if (other == null) {
        return;
      }
      if (other.DatabaseId.Length != 0) {
        DatabaseId = other.DatabaseId;
      }
      if (other.DatabaseName.Length != 0) {
        DatabaseName = other.DatabaseName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DatabaseId = input.ReadString();
            break;
          }
          case 18: {
            DatabaseName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            DatabaseId = input.ReadString();
            break;
          }
          case 18: {
            DatabaseName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GetDatabaseRequest : pb::IMessage<GetDatabaseRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetDatabaseRequest> _parser = new pb::MessageParser<GetDatabaseRequest>(() => new GetDatabaseRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetDatabaseRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::grpsApp1.DatabaseServiceReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDatabaseRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDatabaseRequest(GetDatabaseRequest other) : this() {
      databaseId_ = other.databaseId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDatabaseRequest Clone() {
      return new GetDatabaseRequest(this);
    }

    /// <summary>Field number for the "database_id" field.</summary>
    public const int DatabaseIdFieldNumber = 1;
    private string databaseId_ = "";
    /// <summary>
    /// Required. ID of the YDB cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DatabaseId {
      get { return databaseId_; }
      set {
        databaseId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetDatabaseRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetDatabaseRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DatabaseId != other.DatabaseId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DatabaseId.Length != 0) hash ^= DatabaseId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (DatabaseId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DatabaseId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (DatabaseId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DatabaseId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DatabaseId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DatabaseId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetDatabaseRequest other) {
      if (other == null) {
        return;
      }
      if (other.DatabaseId.Length != 0) {
        DatabaseId = other.DatabaseId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DatabaseId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            DatabaseId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ListDatabasesRequest : pb::IMessage<ListDatabasesRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ListDatabasesRequest> _parser = new pb::MessageParser<ListDatabasesRequest>(() => new ListDatabasesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListDatabasesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::grpsApp1.DatabaseServiceReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDatabasesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDatabasesRequest(ListDatabasesRequest other) : this() {
      folderId_ = other.folderId_;
      pageSize_ = other.pageSize_;
      pageToken_ = other.pageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDatabasesRequest Clone() {
      return new ListDatabasesRequest(this);
    }

    /// <summary>Field number for the "folder_id" field.</summary>
    public const int FolderIdFieldNumber = 1;
    private string folderId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FolderId {
      get { return folderId_; }
      set {
        folderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private long pageSize_;
    /// <summary>
    /// The maximum number of results per page that should be returned. If the number of available
    /// results is larger than `page_size`, the service returns a `next_page_token` that can be used
    /// to get the next page of results in subsequent ListDatabases requests.
    /// Acceptable values are 0 to 1000, inclusive. Default value: 100.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 3;
    private string pageToken_ = "";
    /// <summary>
    /// Page token. Set `page_token` to the `next_page_token` returned by a previous ListDatabases
    /// request to get the next page of results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListDatabasesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListDatabasesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FolderId != other.FolderId) return false;
      if (PageSize != other.PageSize) return false;
      if (PageToken != other.PageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FolderId.Length != 0) hash ^= FolderId.GetHashCode();
      if (PageSize != 0L) hash ^= PageSize.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FolderId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FolderId);
      }
      if (PageSize != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FolderId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FolderId);
      }
      if (PageSize != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FolderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FolderId);
      }
      if (PageSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PageSize);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListDatabasesRequest other) {
      if (other == null) {
        return;
      }
      if (other.FolderId.Length != 0) {
        FolderId = other.FolderId;
      }
      if (other.PageSize != 0L) {
        PageSize = other.PageSize;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FolderId = input.ReadString();
            break;
          }
          case 16: {
            PageSize = input.ReadInt64();
            break;
          }
          case 26: {
            PageToken = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FolderId = input.ReadString();
            break;
          }
          case 16: {
            PageSize = input.ReadInt64();
            break;
          }
          case 26: {
            PageToken = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ListDatabasesResponse : pb::IMessage<ListDatabasesResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ListDatabasesResponse> _parser = new pb::MessageParser<ListDatabasesResponse>(() => new ListDatabasesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListDatabasesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::grpsApp1.DatabaseServiceReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDatabasesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDatabasesResponse(ListDatabasesResponse other) : this() {
      databases_ = other.databases_.Clone();
      nextPageToken_ = other.nextPageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDatabasesResponse Clone() {
      return new ListDatabasesResponse(this);
    }

    /// <summary>Field number for the "databases" field.</summary>
    public const int DatabasesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::grpsApp1.Database> _repeated_databases_codec
        = pb::FieldCodec.ForMessage(10, global::grpsApp1.Database.Parser);
    private readonly pbc::RepeatedField<global::grpsApp1.Database> databases_ = new pbc::RepeatedField<global::grpsApp1.Database>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::grpsApp1.Database> Databases {
      get { return databases_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    /// This token allows you to get the next page of results for ListDatabases requests,
    /// if the number of results is larger than `page_size` specified in the request.
    /// To get the next page, specify the value of `next_page_token` as a value for
    /// the `page_token` parameter in the next ListDatabases request. Subsequent ListDatabases
    /// requests will have their own `next_page_token` to continue paging through the results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListDatabasesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListDatabasesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!databases_.Equals(other.databases_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= databases_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      databases_.WriteTo(output, _repeated_databases_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      databases_.WriteTo(ref output, _repeated_databases_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += databases_.CalculateSize(_repeated_databases_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListDatabasesResponse other) {
      if (other == null) {
        return;
      }
      databases_.Add(other.databases_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            databases_.AddEntriesFrom(input, _repeated_databases_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            databases_.AddEntriesFrom(ref input, _repeated_databases_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CreateDatabaseRequest : pb::IMessage<CreateDatabaseRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CreateDatabaseRequest> _parser = new pb::MessageParser<CreateDatabaseRequest>(() => new CreateDatabaseRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateDatabaseRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::grpsApp1.DatabaseServiceReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateDatabaseRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateDatabaseRequest(CreateDatabaseRequest other) : this() {
      folderId_ = other.folderId_;
      name_ = other.name_;
      description_ = other.description_;
      resourcePresetId_ = other.resourcePresetId_;
      storageConfig_ = other.storageConfig_ != null ? other.storageConfig_.Clone() : null;
      scalePolicy_ = other.scalePolicy_ != null ? other.scalePolicy_.Clone() : null;
      networkId_ = other.networkId_;
      subnetIds_ = other.subnetIds_.Clone();
      assignPublicIps_ = other.assignPublicIps_;
      locationId_ = other.locationId_;
      labels_ = other.labels_.Clone();
      backupConfig_ = other.backupConfig_ != null ? other.backupConfig_.Clone() : null;
      switch (other.DatabaseTypeCase) {
        case DatabaseTypeOneofCase.ZonalDatabase:
          ZonalDatabase = other.ZonalDatabase.Clone();
          break;
        case DatabaseTypeOneofCase.RegionalDatabase:
          RegionalDatabase = other.RegionalDatabase.Clone();
          break;
        case DatabaseTypeOneofCase.DedicatedDatabase:
          DedicatedDatabase = other.DedicatedDatabase.Clone();
          break;
        case DatabaseTypeOneofCase.ServerlessDatabase:
          ServerlessDatabase = other.ServerlessDatabase.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateDatabaseRequest Clone() {
      return new CreateDatabaseRequest(this);
    }

    /// <summary>Field number for the "folder_id" field.</summary>
    public const int FolderIdFieldNumber = 1;
    private string folderId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FolderId {
      get { return folderId_; }
      set {
        folderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resource_preset_id" field.</summary>
    public const int ResourcePresetIdFieldNumber = 4;
    private string resourcePresetId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResourcePresetId {
      get { return resourcePresetId_; }
      set {
        resourcePresetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "storage_config" field.</summary>
    public const int StorageConfigFieldNumber = 5;
    private global::grpsApp1.StorageConfig storageConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::grpsApp1.StorageConfig StorageConfig {
      get { return storageConfig_; }
      set {
        storageConfig_ = value;
      }
    }

    /// <summary>Field number for the "scale_policy" field.</summary>
    public const int ScalePolicyFieldNumber = 6;
    private global::grpsApp1.ScalePolicy scalePolicy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::grpsApp1.ScalePolicy ScalePolicy {
      get { return scalePolicy_; }
      set {
        scalePolicy_ = value;
      }
    }

    /// <summary>Field number for the "network_id" field.</summary>
    public const int NetworkIdFieldNumber = 7;
    private string networkId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NetworkId {
      get { return networkId_; }
      set {
        networkId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "subnet_ids" field.</summary>
    public const int SubnetIdsFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _repeated_subnetIds_codec
        = pb::FieldCodec.ForString(66);
    private readonly pbc::RepeatedField<string> subnetIds_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> SubnetIds {
      get { return subnetIds_; }
    }

    /// <summary>Field number for the "zonal_database" field.</summary>
    public const int ZonalDatabaseFieldNumber = 9;
    /// <summary>
    /// deprecated field
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::grpsApp1.ZonalDatabase ZonalDatabase {
      get { return databaseTypeCase_ == DatabaseTypeOneofCase.ZonalDatabase ? (global::grpsApp1.ZonalDatabase) databaseType_ : null; }
      set {
        databaseType_ = value;
        databaseTypeCase_ = value == null ? DatabaseTypeOneofCase.None : DatabaseTypeOneofCase.ZonalDatabase;
      }
    }

    /// <summary>Field number for the "regional_database" field.</summary>
    public const int RegionalDatabaseFieldNumber = 10;
    /// <summary>
    /// deprecated field
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::grpsApp1.RegionalDatabase RegionalDatabase {
      get { return databaseTypeCase_ == DatabaseTypeOneofCase.RegionalDatabase ? (global::grpsApp1.RegionalDatabase) databaseType_ : null; }
      set {
        databaseType_ = value;
        databaseTypeCase_ = value == null ? DatabaseTypeOneofCase.None : DatabaseTypeOneofCase.RegionalDatabase;
      }
    }

    /// <summary>Field number for the "dedicated_database" field.</summary>
    public const int DedicatedDatabaseFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::grpsApp1.DedicatedDatabase DedicatedDatabase {
      get { return databaseTypeCase_ == DatabaseTypeOneofCase.DedicatedDatabase ? (global::grpsApp1.DedicatedDatabase) databaseType_ : null; }
      set {
        databaseType_ = value;
        databaseTypeCase_ = value == null ? DatabaseTypeOneofCase.None : DatabaseTypeOneofCase.DedicatedDatabase;
      }
    }

    /// <summary>Field number for the "serverless_database" field.</summary>
    public const int ServerlessDatabaseFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::grpsApp1.ServerlessDatabase ServerlessDatabase {
      get { return databaseTypeCase_ == DatabaseTypeOneofCase.ServerlessDatabase ? (global::grpsApp1.ServerlessDatabase) databaseType_ : null; }
      set {
        databaseType_ = value;
        databaseTypeCase_ = value == null ? DatabaseTypeOneofCase.None : DatabaseTypeOneofCase.ServerlessDatabase;
      }
    }

    /// <summary>Field number for the "assign_public_ips" field.</summary>
    public const int AssignPublicIpsFieldNumber = 11;
    private bool assignPublicIps_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AssignPublicIps {
      get { return assignPublicIps_; }
      set {
        assignPublicIps_ = value;
      }
    }

    /// <summary>Field number for the "location_id" field.</summary>
    public const int LocationIdFieldNumber = 12;
    private string locationId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LocationId {
      get { return locationId_; }
      set {
        locationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 15;
    private static readonly pbc::MapField<string, string>.Codec _map_labels_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 122);
    private readonly pbc::MapField<string, string> labels_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Labels {
      get { return labels_; }
    }

    /// <summary>Field number for the "backup_config" field.</summary>
    public const int BackupConfigFieldNumber = 16;
    private global::grpsApp1.BackupConfig backupConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::grpsApp1.BackupConfig BackupConfig {
      get { return backupConfig_; }
      set {
        backupConfig_ = value;
      }
    }

    private object databaseType_;
    /// <summary>Enum of possible cases for the "database_type" oneof.</summary>
    public enum DatabaseTypeOneofCase {
      None = 0,
      ZonalDatabase = 9,
      RegionalDatabase = 10,
      DedicatedDatabase = 13,
      ServerlessDatabase = 14,
    }
    private DatabaseTypeOneofCase databaseTypeCase_ = DatabaseTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatabaseTypeOneofCase DatabaseTypeCase {
      get { return databaseTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDatabaseType() {
      databaseTypeCase_ = DatabaseTypeOneofCase.None;
      databaseType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateDatabaseRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateDatabaseRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FolderId != other.FolderId) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (ResourcePresetId != other.ResourcePresetId) return false;
      if (!object.Equals(StorageConfig, other.StorageConfig)) return false;
      if (!object.Equals(ScalePolicy, other.ScalePolicy)) return false;
      if (NetworkId != other.NetworkId) return false;
      if(!subnetIds_.Equals(other.subnetIds_)) return false;
      if (!object.Equals(ZonalDatabase, other.ZonalDatabase)) return false;
      if (!object.Equals(RegionalDatabase, other.RegionalDatabase)) return false;
      if (!object.Equals(DedicatedDatabase, other.DedicatedDatabase)) return false;
      if (!object.Equals(ServerlessDatabase, other.ServerlessDatabase)) return false;
      if (AssignPublicIps != other.AssignPublicIps) return false;
      if (LocationId != other.LocationId) return false;
      if (!Labels.Equals(other.Labels)) return false;
      if (!object.Equals(BackupConfig, other.BackupConfig)) return false;
      if (DatabaseTypeCase != other.DatabaseTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FolderId.Length != 0) hash ^= FolderId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (ResourcePresetId.Length != 0) hash ^= ResourcePresetId.GetHashCode();
      if (storageConfig_ != null) hash ^= StorageConfig.GetHashCode();
      if (scalePolicy_ != null) hash ^= ScalePolicy.GetHashCode();
      if (NetworkId.Length != 0) hash ^= NetworkId.GetHashCode();
      hash ^= subnetIds_.GetHashCode();
      if (databaseTypeCase_ == DatabaseTypeOneofCase.ZonalDatabase) hash ^= ZonalDatabase.GetHashCode();
      if (databaseTypeCase_ == DatabaseTypeOneofCase.RegionalDatabase) hash ^= RegionalDatabase.GetHashCode();
      if (databaseTypeCase_ == DatabaseTypeOneofCase.DedicatedDatabase) hash ^= DedicatedDatabase.GetHashCode();
      if (databaseTypeCase_ == DatabaseTypeOneofCase.ServerlessDatabase) hash ^= ServerlessDatabase.GetHashCode();
      if (AssignPublicIps != false) hash ^= AssignPublicIps.GetHashCode();
      if (LocationId.Length != 0) hash ^= LocationId.GetHashCode();
      hash ^= Labels.GetHashCode();
      if (backupConfig_ != null) hash ^= BackupConfig.GetHashCode();
      hash ^= (int) databaseTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FolderId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FolderId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (ResourcePresetId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ResourcePresetId);
      }
      if (storageConfig_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(StorageConfig);
      }
      if (scalePolicy_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ScalePolicy);
      }
      if (NetworkId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(NetworkId);
      }
      subnetIds_.WriteTo(output, _repeated_subnetIds_codec);
      if (databaseTypeCase_ == DatabaseTypeOneofCase.ZonalDatabase) {
        output.WriteRawTag(74);
        output.WriteMessage(ZonalDatabase);
      }
      if (databaseTypeCase_ == DatabaseTypeOneofCase.RegionalDatabase) {
        output.WriteRawTag(82);
        output.WriteMessage(RegionalDatabase);
      }
      if (AssignPublicIps != false) {
        output.WriteRawTag(88);
        output.WriteBool(AssignPublicIps);
      }
      if (LocationId.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(LocationId);
      }
      if (databaseTypeCase_ == DatabaseTypeOneofCase.DedicatedDatabase) {
        output.WriteRawTag(106);
        output.WriteMessage(DedicatedDatabase);
      }
      if (databaseTypeCase_ == DatabaseTypeOneofCase.ServerlessDatabase) {
        output.WriteRawTag(114);
        output.WriteMessage(ServerlessDatabase);
      }
      labels_.WriteTo(output, _map_labels_codec);
      if (backupConfig_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(BackupConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FolderId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FolderId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (ResourcePresetId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ResourcePresetId);
      }
      if (storageConfig_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(StorageConfig);
      }
      if (scalePolicy_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ScalePolicy);
      }
      if (NetworkId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(NetworkId);
      }
      subnetIds_.WriteTo(ref output, _repeated_subnetIds_codec);
      if (databaseTypeCase_ == DatabaseTypeOneofCase.ZonalDatabase) {
        output.WriteRawTag(74);
        output.WriteMessage(ZonalDatabase);
      }
      if (databaseTypeCase_ == DatabaseTypeOneofCase.RegionalDatabase) {
        output.WriteRawTag(82);
        output.WriteMessage(RegionalDatabase);
      }
      if (AssignPublicIps != false) {
        output.WriteRawTag(88);
        output.WriteBool(AssignPublicIps);
      }
      if (LocationId.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(LocationId);
      }
      if (databaseTypeCase_ == DatabaseTypeOneofCase.DedicatedDatabase) {
        output.WriteRawTag(106);
        output.WriteMessage(DedicatedDatabase);
      }
      if (databaseTypeCase_ == DatabaseTypeOneofCase.ServerlessDatabase) {
        output.WriteRawTag(114);
        output.WriteMessage(ServerlessDatabase);
      }
      labels_.WriteTo(ref output, _map_labels_codec);
      if (backupConfig_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(BackupConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FolderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FolderId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (ResourcePresetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourcePresetId);
      }
      if (storageConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StorageConfig);
      }
      if (scalePolicy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScalePolicy);
      }
      if (NetworkId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NetworkId);
      }
      size += subnetIds_.CalculateSize(_repeated_subnetIds_codec);
      if (databaseTypeCase_ == DatabaseTypeOneofCase.ZonalDatabase) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ZonalDatabase);
      }
      if (databaseTypeCase_ == DatabaseTypeOneofCase.RegionalDatabase) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RegionalDatabase);
      }
      if (databaseTypeCase_ == DatabaseTypeOneofCase.DedicatedDatabase) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DedicatedDatabase);
      }
      if (databaseTypeCase_ == DatabaseTypeOneofCase.ServerlessDatabase) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServerlessDatabase);
      }
      if (AssignPublicIps != false) {
        size += 1 + 1;
      }
      if (LocationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LocationId);
      }
      size += labels_.CalculateSize(_map_labels_codec);
      if (backupConfig_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BackupConfig);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateDatabaseRequest other) {
      if (other == null) {
        return;
      }
      if (other.FolderId.Length != 0) {
        FolderId = other.FolderId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.ResourcePresetId.Length != 0) {
        ResourcePresetId = other.ResourcePresetId;
      }
      if (other.storageConfig_ != null) {
        if (storageConfig_ == null) {
          StorageConfig = new global::grpsApp1.StorageConfig();
        }
        StorageConfig.MergeFrom(other.StorageConfig);
      }
      if (other.scalePolicy_ != null) {
        if (scalePolicy_ == null) {
          ScalePolicy = new global::grpsApp1.ScalePolicy();
        }
        ScalePolicy.MergeFrom(other.ScalePolicy);
      }
      if (other.NetworkId.Length != 0) {
        NetworkId = other.NetworkId;
      }
      subnetIds_.Add(other.subnetIds_);
      if (other.AssignPublicIps != false) {
        AssignPublicIps = other.AssignPublicIps;
      }
      if (other.LocationId.Length != 0) {
        LocationId = other.LocationId;
      }
      labels_.Add(other.labels_);
      if (other.backupConfig_ != null) {
        if (backupConfig_ == null) {
          BackupConfig = new global::grpsApp1.BackupConfig();
        }
        BackupConfig.MergeFrom(other.BackupConfig);
      }
      switch (other.DatabaseTypeCase) {
        case DatabaseTypeOneofCase.ZonalDatabase:
          if (ZonalDatabase == null) {
            ZonalDatabase = new global::grpsApp1.ZonalDatabase();
          }
          ZonalDatabase.MergeFrom(other.ZonalDatabase);
          break;
        case DatabaseTypeOneofCase.RegionalDatabase:
          if (RegionalDatabase == null) {
            RegionalDatabase = new global::grpsApp1.RegionalDatabase();
          }
          RegionalDatabase.MergeFrom(other.RegionalDatabase);
          break;
        case DatabaseTypeOneofCase.DedicatedDatabase:
          if (DedicatedDatabase == null) {
            DedicatedDatabase = new global::grpsApp1.DedicatedDatabase();
          }
          DedicatedDatabase.MergeFrom(other.DedicatedDatabase);
          break;
        case DatabaseTypeOneofCase.ServerlessDatabase:
          if (ServerlessDatabase == null) {
            ServerlessDatabase = new global::grpsApp1.ServerlessDatabase();
          }
          ServerlessDatabase.MergeFrom(other.ServerlessDatabase);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FolderId = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            ResourcePresetId = input.ReadString();
            break;
          }
          case 42: {
            if (storageConfig_ == null) {
              StorageConfig = new global::grpsApp1.StorageConfig();
            }
            input.ReadMessage(StorageConfig);
            break;
          }
          case 50: {
            if (scalePolicy_ == null) {
              ScalePolicy = new global::grpsApp1.ScalePolicy();
            }
            input.ReadMessage(ScalePolicy);
            break;
          }
          case 58: {
            NetworkId = input.ReadString();
            break;
          }
          case 66: {
            subnetIds_.AddEntriesFrom(input, _repeated_subnetIds_codec);
            break;
          }
          case 74: {
            global::grpsApp1.ZonalDatabase subBuilder = new global::grpsApp1.ZonalDatabase();
            if (databaseTypeCase_ == DatabaseTypeOneofCase.ZonalDatabase) {
              subBuilder.MergeFrom(ZonalDatabase);
            }
            input.ReadMessage(subBuilder);
            ZonalDatabase = subBuilder;
            break;
          }
          case 82: {
            global::grpsApp1.RegionalDatabase subBuilder = new global::grpsApp1.RegionalDatabase();
            if (databaseTypeCase_ == DatabaseTypeOneofCase.RegionalDatabase) {
              subBuilder.MergeFrom(RegionalDatabase);
            }
            input.ReadMessage(subBuilder);
            RegionalDatabase = subBuilder;
            break;
          }
          case 88: {
            AssignPublicIps = input.ReadBool();
            break;
          }
          case 98: {
            LocationId = input.ReadString();
            break;
          }
          case 106: {
            global::grpsApp1.DedicatedDatabase subBuilder = new global::grpsApp1.DedicatedDatabase();
            if (databaseTypeCase_ == DatabaseTypeOneofCase.DedicatedDatabase) {
              subBuilder.MergeFrom(DedicatedDatabase);
            }
            input.ReadMessage(subBuilder);
            DedicatedDatabase = subBuilder;
            break;
          }
          case 114: {
            global::grpsApp1.ServerlessDatabase subBuilder = new global::grpsApp1.ServerlessDatabase();
            if (databaseTypeCase_ == DatabaseTypeOneofCase.ServerlessDatabase) {
              subBuilder.MergeFrom(ServerlessDatabase);
            }
            input.ReadMessage(subBuilder);
            ServerlessDatabase = subBuilder;
            break;
          }
          case 122: {
            labels_.AddEntriesFrom(input, _map_labels_codec);
            break;
          }
          case 130: {
            if (backupConfig_ == null) {
              BackupConfig = new global::grpsApp1.BackupConfig();
            }
            input.ReadMessage(BackupConfig);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FolderId = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            ResourcePresetId = input.ReadString();
            break;
          }
          case 42: {
            if (storageConfig_ == null) {
              StorageConfig = new global::grpsApp1.StorageConfig();
            }
            input.ReadMessage(StorageConfig);
            break;
          }
          case 50: {
            if (scalePolicy_ == null) {
              ScalePolicy = new global::grpsApp1.ScalePolicy();
            }
            input.ReadMessage(ScalePolicy);
            break;
          }
          case 58: {
            NetworkId = input.ReadString();
            break;
          }
          case 66: {
            subnetIds_.AddEntriesFrom(ref input, _repeated_subnetIds_codec);
            break;
          }
          case 74: {
            global::grpsApp1.ZonalDatabase subBuilder = new global::grpsApp1.ZonalDatabase();
            if (databaseTypeCase_ == DatabaseTypeOneofCase.ZonalDatabase) {
              subBuilder.MergeFrom(ZonalDatabase);
            }
            input.ReadMessage(subBuilder);
            ZonalDatabase = subBuilder;
            break;
          }
          case 82: {
            global::grpsApp1.RegionalDatabase subBuilder = new global::grpsApp1.RegionalDatabase();
            if (databaseTypeCase_ == DatabaseTypeOneofCase.RegionalDatabase) {
              subBuilder.MergeFrom(RegionalDatabase);
            }
            input.ReadMessage(subBuilder);
            RegionalDatabase = subBuilder;
            break;
          }
          case 88: {
            AssignPublicIps = input.ReadBool();
            break;
          }
          case 98: {
            LocationId = input.ReadString();
            break;
          }
          case 106: {
            global::grpsApp1.DedicatedDatabase subBuilder = new global::grpsApp1.DedicatedDatabase();
            if (databaseTypeCase_ == DatabaseTypeOneofCase.DedicatedDatabase) {
              subBuilder.MergeFrom(DedicatedDatabase);
            }
            input.ReadMessage(subBuilder);
            DedicatedDatabase = subBuilder;
            break;
          }
          case 114: {
            global::grpsApp1.ServerlessDatabase subBuilder = new global::grpsApp1.ServerlessDatabase();
            if (databaseTypeCase_ == DatabaseTypeOneofCase.ServerlessDatabase) {
              subBuilder.MergeFrom(ServerlessDatabase);
            }
            input.ReadMessage(subBuilder);
            ServerlessDatabase = subBuilder;
            break;
          }
          case 122: {
            labels_.AddEntriesFrom(ref input, _map_labels_codec);
            break;
          }
          case 130: {
            if (backupConfig_ == null) {
              BackupConfig = new global::grpsApp1.BackupConfig();
            }
            input.ReadMessage(BackupConfig);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CreateDatabaseMetadata : pb::IMessage<CreateDatabaseMetadata>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CreateDatabaseMetadata> _parser = new pb::MessageParser<CreateDatabaseMetadata>(() => new CreateDatabaseMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateDatabaseMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::grpsApp1.DatabaseServiceReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateDatabaseMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateDatabaseMetadata(CreateDatabaseMetadata other) : this() {
      databaseId_ = other.databaseId_;
      databaseName_ = other.databaseName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateDatabaseMetadata Clone() {
      return new CreateDatabaseMetadata(this);
    }

    /// <summary>Field number for the "database_id" field.</summary>
    public const int DatabaseIdFieldNumber = 1;
    private string databaseId_ = "";
    /// <summary>
    /// Required. ID of the YDB cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DatabaseId {
      get { return databaseId_; }
      set {
        databaseId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "database_name" field.</summary>
    public const int DatabaseNameFieldNumber = 2;
    private string databaseName_ = "";
    /// <summary>
    /// Required. Name of the creating database.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DatabaseName {
      get { return databaseName_; }
      set {
        databaseName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateDatabaseMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateDatabaseMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DatabaseId != other.DatabaseId) return false;
      if (DatabaseName != other.DatabaseName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DatabaseId.Length != 0) hash ^= DatabaseId.GetHashCode();
      if (DatabaseName.Length != 0) hash ^= DatabaseName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (DatabaseId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DatabaseId);
      }
      if (DatabaseName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DatabaseName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (DatabaseId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DatabaseId);
      }
      if (DatabaseName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DatabaseName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DatabaseId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DatabaseId);
      }
      if (DatabaseName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DatabaseName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateDatabaseMetadata other) {
      if (other == null) {
        return;
      }
      if (other.DatabaseId.Length != 0) {
        DatabaseId = other.DatabaseId;
      }
      if (other.DatabaseName.Length != 0) {
        DatabaseName = other.DatabaseName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DatabaseId = input.ReadString();
            break;
          }
          case 18: {
            DatabaseName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            DatabaseId = input.ReadString();
            break;
          }
          case 18: {
            DatabaseName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class UpdateDatabaseRequest : pb::IMessage<UpdateDatabaseRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UpdateDatabaseRequest> _parser = new pb::MessageParser<UpdateDatabaseRequest>(() => new UpdateDatabaseRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateDatabaseRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::grpsApp1.DatabaseServiceReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDatabaseRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDatabaseRequest(UpdateDatabaseRequest other) : this() {
      folderId_ = other.folderId_;
      updateMask_ = other.updateMask_ != null ? other.updateMask_.Clone() : null;
      databaseId_ = other.databaseId_;
      name_ = other.name_;
      description_ = other.description_;
      resourcePresetId_ = other.resourcePresetId_;
      storageConfig_ = other.storageConfig_ != null ? other.storageConfig_.Clone() : null;
      scalePolicy_ = other.scalePolicy_ != null ? other.scalePolicy_.Clone() : null;
      networkId_ = other.networkId_;
      subnetIds_ = other.subnetIds_.Clone();
      assignPublicIps_ = other.assignPublicIps_;
      locationId_ = other.locationId_;
      labels_ = other.labels_.Clone();
      backupConfig_ = other.backupConfig_ != null ? other.backupConfig_.Clone() : null;
      switch (other.DatabaseTypeCase) {
        case DatabaseTypeOneofCase.ZonalDatabase:
          ZonalDatabase = other.ZonalDatabase.Clone();
          break;
        case DatabaseTypeOneofCase.RegionalDatabase:
          RegionalDatabase = other.RegionalDatabase.Clone();
          break;
        case DatabaseTypeOneofCase.DedicatedDatabase:
          DedicatedDatabase = other.DedicatedDatabase.Clone();
          break;
        case DatabaseTypeOneofCase.ServerlessDatabase:
          ServerlessDatabase = other.ServerlessDatabase.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDatabaseRequest Clone() {
      return new UpdateDatabaseRequest(this);
    }

    /// <summary>Field number for the "folder_id" field.</summary>
    public const int FolderIdFieldNumber = 1;
    private string folderId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FolderId {
      get { return folderId_; }
      set {
        folderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "update_mask" field.</summary>
    public const int UpdateMaskFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.FieldMask updateMask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.FieldMask UpdateMask {
      get { return updateMask_; }
      set {
        updateMask_ = value;
      }
    }

    /// <summary>Field number for the "database_id" field.</summary>
    public const int DatabaseIdFieldNumber = 3;
    private string databaseId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DatabaseId {
      get { return databaseId_; }
      set {
        databaseId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 5;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resource_preset_id" field.</summary>
    public const int ResourcePresetIdFieldNumber = 6;
    private string resourcePresetId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResourcePresetId {
      get { return resourcePresetId_; }
      set {
        resourcePresetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "storage_config" field.</summary>
    public const int StorageConfigFieldNumber = 7;
    private global::grpsApp1.StorageConfig storageConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::grpsApp1.StorageConfig StorageConfig {
      get { return storageConfig_; }
      set {
        storageConfig_ = value;
      }
    }

    /// <summary>Field number for the "scale_policy" field.</summary>
    public const int ScalePolicyFieldNumber = 8;
    private global::grpsApp1.ScalePolicy scalePolicy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::grpsApp1.ScalePolicy ScalePolicy {
      get { return scalePolicy_; }
      set {
        scalePolicy_ = value;
      }
    }

    /// <summary>Field number for the "network_id" field.</summary>
    public const int NetworkIdFieldNumber = 9;
    private string networkId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NetworkId {
      get { return networkId_; }
      set {
        networkId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "subnet_ids" field.</summary>
    public const int SubnetIdsFieldNumber = 10;
    private static readonly pb::FieldCodec<string> _repeated_subnetIds_codec
        = pb::FieldCodec.ForString(82);
    private readonly pbc::RepeatedField<string> subnetIds_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> SubnetIds {
      get { return subnetIds_; }
    }

    /// <summary>Field number for the "zonal_database" field.</summary>
    public const int ZonalDatabaseFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::grpsApp1.ZonalDatabase ZonalDatabase {
      get { return databaseTypeCase_ == DatabaseTypeOneofCase.ZonalDatabase ? (global::grpsApp1.ZonalDatabase) databaseType_ : null; }
      set {
        databaseType_ = value;
        databaseTypeCase_ = value == null ? DatabaseTypeOneofCase.None : DatabaseTypeOneofCase.ZonalDatabase;
      }
    }

    /// <summary>Field number for the "regional_database" field.</summary>
    public const int RegionalDatabaseFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::grpsApp1.RegionalDatabase RegionalDatabase {
      get { return databaseTypeCase_ == DatabaseTypeOneofCase.RegionalDatabase ? (global::grpsApp1.RegionalDatabase) databaseType_ : null; }
      set {
        databaseType_ = value;
        databaseTypeCase_ = value == null ? DatabaseTypeOneofCase.None : DatabaseTypeOneofCase.RegionalDatabase;
      }
    }

    /// <summary>Field number for the "dedicated_database" field.</summary>
    public const int DedicatedDatabaseFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::grpsApp1.DedicatedDatabase DedicatedDatabase {
      get { return databaseTypeCase_ == DatabaseTypeOneofCase.DedicatedDatabase ? (global::grpsApp1.DedicatedDatabase) databaseType_ : null; }
      set {
        databaseType_ = value;
        databaseTypeCase_ = value == null ? DatabaseTypeOneofCase.None : DatabaseTypeOneofCase.DedicatedDatabase;
      }
    }

    /// <summary>Field number for the "serverless_database" field.</summary>
    public const int ServerlessDatabaseFieldNumber = 16;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::grpsApp1.ServerlessDatabase ServerlessDatabase {
      get { return databaseTypeCase_ == DatabaseTypeOneofCase.ServerlessDatabase ? (global::grpsApp1.ServerlessDatabase) databaseType_ : null; }
      set {
        databaseType_ = value;
        databaseTypeCase_ = value == null ? DatabaseTypeOneofCase.None : DatabaseTypeOneofCase.ServerlessDatabase;
      }
    }

    /// <summary>Field number for the "assign_public_ips" field.</summary>
    public const int AssignPublicIpsFieldNumber = 13;
    private bool assignPublicIps_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AssignPublicIps {
      get { return assignPublicIps_; }
      set {
        assignPublicIps_ = value;
      }
    }

    /// <summary>Field number for the "location_id" field.</summary>
    public const int LocationIdFieldNumber = 14;
    private string locationId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LocationId {
      get { return locationId_; }
      set {
        locationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 17;
    private static readonly pbc::MapField<string, string>.Codec _map_labels_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 138);
    private readonly pbc::MapField<string, string> labels_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Labels {
      get { return labels_; }
    }

    /// <summary>Field number for the "backup_config" field.</summary>
    public const int BackupConfigFieldNumber = 18;
    private global::grpsApp1.BackupConfig backupConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::grpsApp1.BackupConfig BackupConfig {
      get { return backupConfig_; }
      set {
        backupConfig_ = value;
      }
    }

    private object databaseType_;
    /// <summary>Enum of possible cases for the "database_type" oneof.</summary>
    public enum DatabaseTypeOneofCase {
      None = 0,
      ZonalDatabase = 11,
      RegionalDatabase = 12,
      DedicatedDatabase = 15,
      ServerlessDatabase = 16,
    }
    private DatabaseTypeOneofCase databaseTypeCase_ = DatabaseTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatabaseTypeOneofCase DatabaseTypeCase {
      get { return databaseTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDatabaseType() {
      databaseTypeCase_ = DatabaseTypeOneofCase.None;
      databaseType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateDatabaseRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateDatabaseRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FolderId != other.FolderId) return false;
      if (!object.Equals(UpdateMask, other.UpdateMask)) return false;
      if (DatabaseId != other.DatabaseId) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (ResourcePresetId != other.ResourcePresetId) return false;
      if (!object.Equals(StorageConfig, other.StorageConfig)) return false;
      if (!object.Equals(ScalePolicy, other.ScalePolicy)) return false;
      if (NetworkId != other.NetworkId) return false;
      if(!subnetIds_.Equals(other.subnetIds_)) return false;
      if (!object.Equals(ZonalDatabase, other.ZonalDatabase)) return false;
      if (!object.Equals(RegionalDatabase, other.RegionalDatabase)) return false;
      if (!object.Equals(DedicatedDatabase, other.DedicatedDatabase)) return false;
      if (!object.Equals(ServerlessDatabase, other.ServerlessDatabase)) return false;
      if (AssignPublicIps != other.AssignPublicIps) return false;
      if (LocationId != other.LocationId) return false;
      if (!Labels.Equals(other.Labels)) return false;
      if (!object.Equals(BackupConfig, other.BackupConfig)) return false;
      if (DatabaseTypeCase != other.DatabaseTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FolderId.Length != 0) hash ^= FolderId.GetHashCode();
      if (updateMask_ != null) hash ^= UpdateMask.GetHashCode();
      if (DatabaseId.Length != 0) hash ^= DatabaseId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (ResourcePresetId.Length != 0) hash ^= ResourcePresetId.GetHashCode();
      if (storageConfig_ != null) hash ^= StorageConfig.GetHashCode();
      if (scalePolicy_ != null) hash ^= ScalePolicy.GetHashCode();
      if (NetworkId.Length != 0) hash ^= NetworkId.GetHashCode();
      hash ^= subnetIds_.GetHashCode();
      if (databaseTypeCase_ == DatabaseTypeOneofCase.ZonalDatabase) hash ^= ZonalDatabase.GetHashCode();
      if (databaseTypeCase_ == DatabaseTypeOneofCase.RegionalDatabase) hash ^= RegionalDatabase.GetHashCode();
      if (databaseTypeCase_ == DatabaseTypeOneofCase.DedicatedDatabase) hash ^= DedicatedDatabase.GetHashCode();
      if (databaseTypeCase_ == DatabaseTypeOneofCase.ServerlessDatabase) hash ^= ServerlessDatabase.GetHashCode();
      if (AssignPublicIps != false) hash ^= AssignPublicIps.GetHashCode();
      if (LocationId.Length != 0) hash ^= LocationId.GetHashCode();
      hash ^= Labels.GetHashCode();
      if (backupConfig_ != null) hash ^= BackupConfig.GetHashCode();
      hash ^= (int) databaseTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FolderId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FolderId);
      }
      if (updateMask_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UpdateMask);
      }
      if (DatabaseId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DatabaseId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Description);
      }
      if (ResourcePresetId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ResourcePresetId);
      }
      if (storageConfig_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(StorageConfig);
      }
      if (scalePolicy_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(ScalePolicy);
      }
      if (NetworkId.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(NetworkId);
      }
      subnetIds_.WriteTo(output, _repeated_subnetIds_codec);
      if (databaseTypeCase_ == DatabaseTypeOneofCase.ZonalDatabase) {
        output.WriteRawTag(90);
        output.WriteMessage(ZonalDatabase);
      }
      if (databaseTypeCase_ == DatabaseTypeOneofCase.RegionalDatabase) {
        output.WriteRawTag(98);
        output.WriteMessage(RegionalDatabase);
      }
      if (AssignPublicIps != false) {
        output.WriteRawTag(104);
        output.WriteBool(AssignPublicIps);
      }
      if (LocationId.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(LocationId);
      }
      if (databaseTypeCase_ == DatabaseTypeOneofCase.DedicatedDatabase) {
        output.WriteRawTag(122);
        output.WriteMessage(DedicatedDatabase);
      }
      if (databaseTypeCase_ == DatabaseTypeOneofCase.ServerlessDatabase) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(ServerlessDatabase);
      }
      labels_.WriteTo(output, _map_labels_codec);
      if (backupConfig_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(BackupConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FolderId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FolderId);
      }
      if (updateMask_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UpdateMask);
      }
      if (DatabaseId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DatabaseId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Description);
      }
      if (ResourcePresetId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ResourcePresetId);
      }
      if (storageConfig_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(StorageConfig);
      }
      if (scalePolicy_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(ScalePolicy);
      }
      if (NetworkId.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(NetworkId);
      }
      subnetIds_.WriteTo(ref output, _repeated_subnetIds_codec);
      if (databaseTypeCase_ == DatabaseTypeOneofCase.ZonalDatabase) {
        output.WriteRawTag(90);
        output.WriteMessage(ZonalDatabase);
      }
      if (databaseTypeCase_ == DatabaseTypeOneofCase.RegionalDatabase) {
        output.WriteRawTag(98);
        output.WriteMessage(RegionalDatabase);
      }
      if (AssignPublicIps != false) {
        output.WriteRawTag(104);
        output.WriteBool(AssignPublicIps);
      }
      if (LocationId.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(LocationId);
      }
      if (databaseTypeCase_ == DatabaseTypeOneofCase.DedicatedDatabase) {
        output.WriteRawTag(122);
        output.WriteMessage(DedicatedDatabase);
      }
      if (databaseTypeCase_ == DatabaseTypeOneofCase.ServerlessDatabase) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(ServerlessDatabase);
      }
      labels_.WriteTo(ref output, _map_labels_codec);
      if (backupConfig_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(BackupConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FolderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FolderId);
      }
      if (updateMask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateMask);
      }
      if (DatabaseId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DatabaseId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (ResourcePresetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourcePresetId);
      }
      if (storageConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StorageConfig);
      }
      if (scalePolicy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScalePolicy);
      }
      if (NetworkId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NetworkId);
      }
      size += subnetIds_.CalculateSize(_repeated_subnetIds_codec);
      if (databaseTypeCase_ == DatabaseTypeOneofCase.ZonalDatabase) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ZonalDatabase);
      }
      if (databaseTypeCase_ == DatabaseTypeOneofCase.RegionalDatabase) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RegionalDatabase);
      }
      if (databaseTypeCase_ == DatabaseTypeOneofCase.DedicatedDatabase) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DedicatedDatabase);
      }
      if (databaseTypeCase_ == DatabaseTypeOneofCase.ServerlessDatabase) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ServerlessDatabase);
      }
      if (AssignPublicIps != false) {
        size += 1 + 1;
      }
      if (LocationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LocationId);
      }
      size += labels_.CalculateSize(_map_labels_codec);
      if (backupConfig_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BackupConfig);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateDatabaseRequest other) {
      if (other == null) {
        return;
      }
      if (other.FolderId.Length != 0) {
        FolderId = other.FolderId;
      }
      if (other.updateMask_ != null) {
        if (updateMask_ == null) {
          UpdateMask = new global::Google.Protobuf.WellKnownTypes.FieldMask();
        }
        UpdateMask.MergeFrom(other.UpdateMask);
      }
      if (other.DatabaseId.Length != 0) {
        DatabaseId = other.DatabaseId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.ResourcePresetId.Length != 0) {
        ResourcePresetId = other.ResourcePresetId;
      }
      if (other.storageConfig_ != null) {
        if (storageConfig_ == null) {
          StorageConfig = new global::grpsApp1.StorageConfig();
        }
        StorageConfig.MergeFrom(other.StorageConfig);
      }
      if (other.scalePolicy_ != null) {
        if (scalePolicy_ == null) {
          ScalePolicy = new global::grpsApp1.ScalePolicy();
        }
        ScalePolicy.MergeFrom(other.ScalePolicy);
      }
      if (other.NetworkId.Length != 0) {
        NetworkId = other.NetworkId;
      }
      subnetIds_.Add(other.subnetIds_);
      if (other.AssignPublicIps != false) {
        AssignPublicIps = other.AssignPublicIps;
      }
      if (other.LocationId.Length != 0) {
        LocationId = other.LocationId;
      }
      labels_.Add(other.labels_);
      if (other.backupConfig_ != null) {
        if (backupConfig_ == null) {
          BackupConfig = new global::grpsApp1.BackupConfig();
        }
        BackupConfig.MergeFrom(other.BackupConfig);
      }
      switch (other.DatabaseTypeCase) {
        case DatabaseTypeOneofCase.ZonalDatabase:
          if (ZonalDatabase == null) {
            ZonalDatabase = new global::grpsApp1.ZonalDatabase();
          }
          ZonalDatabase.MergeFrom(other.ZonalDatabase);
          break;
        case DatabaseTypeOneofCase.RegionalDatabase:
          if (RegionalDatabase == null) {
            RegionalDatabase = new global::grpsApp1.RegionalDatabase();
          }
          RegionalDatabase.MergeFrom(other.RegionalDatabase);
          break;
        case DatabaseTypeOneofCase.DedicatedDatabase:
          if (DedicatedDatabase == null) {
            DedicatedDatabase = new global::grpsApp1.DedicatedDatabase();
          }
          DedicatedDatabase.MergeFrom(other.DedicatedDatabase);
          break;
        case DatabaseTypeOneofCase.ServerlessDatabase:
          if (ServerlessDatabase == null) {
            ServerlessDatabase = new global::grpsApp1.ServerlessDatabase();
          }
          ServerlessDatabase.MergeFrom(other.ServerlessDatabase);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FolderId = input.ReadString();
            break;
          }
          case 18: {
            if (updateMask_ == null) {
              UpdateMask = new global::Google.Protobuf.WellKnownTypes.FieldMask();
            }
            input.ReadMessage(UpdateMask);
            break;
          }
          case 26: {
            DatabaseId = input.ReadString();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 42: {
            Description = input.ReadString();
            break;
          }
          case 50: {
            ResourcePresetId = input.ReadString();
            break;
          }
          case 58: {
            if (storageConfig_ == null) {
              StorageConfig = new global::grpsApp1.StorageConfig();
            }
            input.ReadMessage(StorageConfig);
            break;
          }
          case 66: {
            if (scalePolicy_ == null) {
              ScalePolicy = new global::grpsApp1.ScalePolicy();
            }
            input.ReadMessage(ScalePolicy);
            break;
          }
          case 74: {
            NetworkId = input.ReadString();
            break;
          }
          case 82: {
            subnetIds_.AddEntriesFrom(input, _repeated_subnetIds_codec);
            break;
          }
          case 90: {
            global::grpsApp1.ZonalDatabase subBuilder = new global::grpsApp1.ZonalDatabase();
            if (databaseTypeCase_ == DatabaseTypeOneofCase.ZonalDatabase) {
              subBuilder.MergeFrom(ZonalDatabase);
            }
            input.ReadMessage(subBuilder);
            ZonalDatabase = subBuilder;
            break;
          }
          case 98: {
            global::grpsApp1.RegionalDatabase subBuilder = new global::grpsApp1.RegionalDatabase();
            if (databaseTypeCase_ == DatabaseTypeOneofCase.RegionalDatabase) {
              subBuilder.MergeFrom(RegionalDatabase);
            }
            input.ReadMessage(subBuilder);
            RegionalDatabase = subBuilder;
            break;
          }
          case 104: {
            AssignPublicIps = input.ReadBool();
            break;
          }
          case 114: {
            LocationId = input.ReadString();
            break;
          }
          case 122: {
            global::grpsApp1.DedicatedDatabase subBuilder = new global::grpsApp1.DedicatedDatabase();
            if (databaseTypeCase_ == DatabaseTypeOneofCase.DedicatedDatabase) {
              subBuilder.MergeFrom(DedicatedDatabase);
            }
            input.ReadMessage(subBuilder);
            DedicatedDatabase = subBuilder;
            break;
          }
          case 130: {
            global::grpsApp1.ServerlessDatabase subBuilder = new global::grpsApp1.ServerlessDatabase();
            if (databaseTypeCase_ == DatabaseTypeOneofCase.ServerlessDatabase) {
              subBuilder.MergeFrom(ServerlessDatabase);
            }
            input.ReadMessage(subBuilder);
            ServerlessDatabase = subBuilder;
            break;
          }
          case 138: {
            labels_.AddEntriesFrom(input, _map_labels_codec);
            break;
          }
          case 146: {
            if (backupConfig_ == null) {
              BackupConfig = new global::grpsApp1.BackupConfig();
            }
            input.ReadMessage(BackupConfig);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FolderId = input.ReadString();
            break;
          }
          case 18: {
            if (updateMask_ == null) {
              UpdateMask = new global::Google.Protobuf.WellKnownTypes.FieldMask();
            }
            input.ReadMessage(UpdateMask);
            break;
          }
          case 26: {
            DatabaseId = input.ReadString();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 42: {
            Description = input.ReadString();
            break;
          }
          case 50: {
            ResourcePresetId = input.ReadString();
            break;
          }
          case 58: {
            if (storageConfig_ == null) {
              StorageConfig = new global::grpsApp1.StorageConfig();
            }
            input.ReadMessage(StorageConfig);
            break;
          }
          case 66: {
            if (scalePolicy_ == null) {
              ScalePolicy = new global::grpsApp1.ScalePolicy();
            }
            input.ReadMessage(ScalePolicy);
            break;
          }
          case 74: {
            NetworkId = input.ReadString();
            break;
          }
          case 82: {
            subnetIds_.AddEntriesFrom(ref input, _repeated_subnetIds_codec);
            break;
          }
          case 90: {
            global::grpsApp1.ZonalDatabase subBuilder = new global::grpsApp1.ZonalDatabase();
            if (databaseTypeCase_ == DatabaseTypeOneofCase.ZonalDatabase) {
              subBuilder.MergeFrom(ZonalDatabase);
            }
            input.ReadMessage(subBuilder);
            ZonalDatabase = subBuilder;
            break;
          }
          case 98: {
            global::grpsApp1.RegionalDatabase subBuilder = new global::grpsApp1.RegionalDatabase();
            if (databaseTypeCase_ == DatabaseTypeOneofCase.RegionalDatabase) {
              subBuilder.MergeFrom(RegionalDatabase);
            }
            input.ReadMessage(subBuilder);
            RegionalDatabase = subBuilder;
            break;
          }
          case 104: {
            AssignPublicIps = input.ReadBool();
            break;
          }
          case 114: {
            LocationId = input.ReadString();
            break;
          }
          case 122: {
            global::grpsApp1.DedicatedDatabase subBuilder = new global::grpsApp1.DedicatedDatabase();
            if (databaseTypeCase_ == DatabaseTypeOneofCase.DedicatedDatabase) {
              subBuilder.MergeFrom(DedicatedDatabase);
            }
            input.ReadMessage(subBuilder);
            DedicatedDatabase = subBuilder;
            break;
          }
          case 130: {
            global::grpsApp1.ServerlessDatabase subBuilder = new global::grpsApp1.ServerlessDatabase();
            if (databaseTypeCase_ == DatabaseTypeOneofCase.ServerlessDatabase) {
              subBuilder.MergeFrom(ServerlessDatabase);
            }
            input.ReadMessage(subBuilder);
            ServerlessDatabase = subBuilder;
            break;
          }
          case 138: {
            labels_.AddEntriesFrom(ref input, _map_labels_codec);
            break;
          }
          case 146: {
            if (backupConfig_ == null) {
              BackupConfig = new global::grpsApp1.BackupConfig();
            }
            input.ReadMessage(BackupConfig);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class UpdateDatabaseMetadata : pb::IMessage<UpdateDatabaseMetadata>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UpdateDatabaseMetadata> _parser = new pb::MessageParser<UpdateDatabaseMetadata>(() => new UpdateDatabaseMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateDatabaseMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::grpsApp1.DatabaseServiceReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDatabaseMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDatabaseMetadata(UpdateDatabaseMetadata other) : this() {
      databaseId_ = other.databaseId_;
      databaseName_ = other.databaseName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDatabaseMetadata Clone() {
      return new UpdateDatabaseMetadata(this);
    }

    /// <summary>Field number for the "database_id" field.</summary>
    public const int DatabaseIdFieldNumber = 1;
    private string databaseId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DatabaseId {
      get { return databaseId_; }
      set {
        databaseId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "database_name" field.</summary>
    public const int DatabaseNameFieldNumber = 2;
    private string databaseName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DatabaseName {
      get { return databaseName_; }
      set {
        databaseName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateDatabaseMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateDatabaseMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DatabaseId != other.DatabaseId) return false;
      if (DatabaseName != other.DatabaseName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DatabaseId.Length != 0) hash ^= DatabaseId.GetHashCode();
      if (DatabaseName.Length != 0) hash ^= DatabaseName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (DatabaseId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DatabaseId);
      }
      if (DatabaseName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DatabaseName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (DatabaseId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DatabaseId);
      }
      if (DatabaseName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DatabaseName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DatabaseId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DatabaseId);
      }
      if (DatabaseName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DatabaseName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateDatabaseMetadata other) {
      if (other == null) {
        return;
      }
      if (other.DatabaseId.Length != 0) {
        DatabaseId = other.DatabaseId;
      }
      if (other.DatabaseName.Length != 0) {
        DatabaseName = other.DatabaseName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DatabaseId = input.ReadString();
            break;
          }
          case 18: {
            DatabaseName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            DatabaseId = input.ReadString();
            break;
          }
          case 18: {
            DatabaseName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DeleteDatabaseRequest : pb::IMessage<DeleteDatabaseRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DeleteDatabaseRequest> _parser = new pb::MessageParser<DeleteDatabaseRequest>(() => new DeleteDatabaseRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteDatabaseRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::grpsApp1.DatabaseServiceReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteDatabaseRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteDatabaseRequest(DeleteDatabaseRequest other) : this() {
      databaseId_ = other.databaseId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteDatabaseRequest Clone() {
      return new DeleteDatabaseRequest(this);
    }

    /// <summary>Field number for the "database_id" field.</summary>
    public const int DatabaseIdFieldNumber = 1;
    private string databaseId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DatabaseId {
      get { return databaseId_; }
      set {
        databaseId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteDatabaseRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteDatabaseRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DatabaseId != other.DatabaseId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DatabaseId.Length != 0) hash ^= DatabaseId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (DatabaseId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DatabaseId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (DatabaseId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DatabaseId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DatabaseId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DatabaseId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteDatabaseRequest other) {
      if (other == null) {
        return;
      }
      if (other.DatabaseId.Length != 0) {
        DatabaseId = other.DatabaseId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DatabaseId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            DatabaseId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DeleteDatabaseMetadata : pb::IMessage<DeleteDatabaseMetadata>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DeleteDatabaseMetadata> _parser = new pb::MessageParser<DeleteDatabaseMetadata>(() => new DeleteDatabaseMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteDatabaseMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::grpsApp1.DatabaseServiceReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteDatabaseMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteDatabaseMetadata(DeleteDatabaseMetadata other) : this() {
      databaseId_ = other.databaseId_;
      databaseName_ = other.databaseName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteDatabaseMetadata Clone() {
      return new DeleteDatabaseMetadata(this);
    }

    /// <summary>Field number for the "database_id" field.</summary>
    public const int DatabaseIdFieldNumber = 1;
    private string databaseId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DatabaseId {
      get { return databaseId_; }
      set {
        databaseId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "database_name" field.</summary>
    public const int DatabaseNameFieldNumber = 2;
    private string databaseName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DatabaseName {
      get { return databaseName_; }
      set {
        databaseName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteDatabaseMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteDatabaseMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DatabaseId != other.DatabaseId) return false;
      if (DatabaseName != other.DatabaseName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DatabaseId.Length != 0) hash ^= DatabaseId.GetHashCode();
      if (DatabaseName.Length != 0) hash ^= DatabaseName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (DatabaseId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DatabaseId);
      }
      if (DatabaseName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DatabaseName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (DatabaseId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DatabaseId);
      }
      if (DatabaseName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DatabaseName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DatabaseId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DatabaseId);
      }
      if (DatabaseName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DatabaseName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteDatabaseMetadata other) {
      if (other == null) {
        return;
      }
      if (other.DatabaseId.Length != 0) {
        DatabaseId = other.DatabaseId;
      }
      if (other.DatabaseName.Length != 0) {
        DatabaseName = other.DatabaseName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DatabaseId = input.ReadString();
            break;
          }
          case 18: {
            DatabaseName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            DatabaseId = input.ReadString();
            break;
          }
          case 18: {
            DatabaseName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
